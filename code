package Code_final.SEF;
import java.util.*;
import java.util.Date;

public class Course {
	private String courseId;
	private String name;
	private String objective;
	private static ArrayList<Course> prereqs;

	private HashMap<String, CourseOffering> offerings;
	static Date censusDate = new Date();

	private int capacity = 4;
	private Student[] students = new Student[capacity];
	private int numberOfStudents;

	public static Date getCensusDate() {
		return censusDate;
	}

	public void setCensusDate(Date censusDate) {
		Course.censusDate = censusDate;
	}

	public Course(String name, int capacity) {
		this.name = name;
		this.capacity = capacity;
	}

	public Course(String courseId, String name, String objective) {
		this.courseId = courseId;
		this.name = name;
		this.objective = objective;
		prereqs = new ArrayList<Course>();
		offerings = new HashMap<String, CourseOffering>();
	}

	public CourseOffering createOffering(int expectedNumber, int year,
			int semester) throws PreExistException {
		if (getOffering(year, semester) != null)
			throw new PreExistException("Offering Already Exists");
		String key = "" + year + ":" + semester;
		CourseOffering offering = new CourseOffering(expectedNumber, year,
				semester);
		offering.setCourse(this);
		offerings.put(key, offering);
		return offering;
	}

	public CourseOffering getOffering(int year, int sem) {
		String key = "" + year + ":" + sem;
		return offerings.get(key);
	}

	public void addPrereq(Course c) {
		prereqs.add(c);
	}

	public String toString() {
		String s = "Id = " + courseId;
		s += " Name = " + name;
		s += " Objective = " + objective;
		s += " Number of prereqs = " + prereqs.size();
		return s;
	}

	public String getId() {
		return courseId;
	}

	public String getName() {
		return name;
	}

	public static ArrayList<Course> getPrereqs() {
		return prereqs;
	}

	public int getNumberOfStudents() {
		return this.numberOfStudents;
	}

	public String getCourseName() {
		return this.name;
	}

	public Student[] getStudents() {
		return this.students;
	}
// h. Students can enrol into courses for which they meet the necessary prerequisites
	public boolean enrollStudent(Student student) {
		if (numberOfStudents < capacity) {
			for (int i = 0; i < numberOfStudents; i++) {
				if (student.equals(students[i]))
					return false;
			}
			students[numberOfStudents] = student;
			numberOfStudents++;
			return true;
		}
		return false;
	}
//i. Students can withdraw from a course until census date (after deregistering from any tute)

	public boolean withdrawStudent(Student student) {
		for (int i = 0; i < numberOfStudents; i++) {
			if (student.equals(students[i])) {
				students[i] = null;
				while (i < numberOfStudents) {
					students[i] = students[i + 1];
					i++;
				}
				numberOfStudents--;
				return true;
			}
		}
		return false;
	}

	public void increaseCapacity() {
		capacity = capacity;
	}

	public void clear() {
		for (int i = 0; i < numberOfStudents; i++) {
			students[i] = null;
		}
	}

	public void list() {
		String result = "";
		for (int i = 0; i < numberOfStudents; i++) {
			result += students[i] + "\n";
		}
		System.out.println(result);
	}

}
